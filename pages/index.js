import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { ConnectButton } from 'web3uikit'
import { useEffect, useState } from 'react'
import Moralis from "moralis"
import { useMoralis, useWeb3ExecuteFunction } from 'react-moralis'
import { verificationAddress } from '../config'
import verificationjson from "../metadata/Verification.json";

export default function Home() {

  const [fileImg, setFileImg] = useState("");
  const [documentData, setDocumentData] = useState([]);
  const contractProcessor = useWeb3ExecuteFunction();
  const { account, isInitialized } = useMoralis();


  const publish = async (e) => {
    e.preventDefault();
    let options = {
      contractAddress: verificationAddress,
      abi: verificationjson.abi,
      functionName: "uploadFile",
      params: {
        _uri: fileImg
      }
    }

    await contractProcessor.fetch({
      params: options,
      onError: (error) => {
        alert(error.message)
      }
    })
  }

  const getDocumentData = async () => {
    let options = {
      contractAddress: verificationAddress,
      abi: verificationjson.abi,
      functionName: "viewDocuments",
    }

    const data = await contractProcessor.fetch({
      params: options,
      onError: (error) => {
        alert(error.message);
      }
    })

    const items = await Promise.all(data.map(async i => {
      const item = {
        id: i.ID.toNumber(),
        uri: i.uri,
        sender: i.sender,
        isVerified: i.isVerified.toString(),
      }
      return item;
    }))
    setDocumentData(items);

    console.log(items)
  }


  useEffect(() => {
    if (isInitialized, account) {
      getDocumentData();
    }
  }, [isInitialized, account])

  const sendFileToIPFS = async (e) => {
    const data = e.target.files[0]
    try {
      const file = new Moralis.File(data.name, data);
      await file.saveIPFS();
      console.log(file.ipfs())
      setFileImg(file.ipfs())
    } catch (error) {
      console.log(error)
    }
  }

  const verify = async (i) => {
    let options = {
      contractAddress: verificationAddress,
      abi: verificationjson.abi,
      functionName: "verifyFile",
      params: {
        _id: i.id
      }
    }

    await contractProcessor.fetch({
      params: options,
      onError: (error) => {
        alert(error.message);
      }
    })

    console.log(i.id)

  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <ConnectButton />
      </div>

      <div>
        <form onSubmit={publish} >
          <input type={"file"} onChange={sendFileToIPFS} />
          <button type='submit' > Publish </button>
        </form>
        {fileImg &&
          <img src={fileImg} />
        }
      </div>

      <table bgcolor='black' >
        <tbody>
          <tr bgcolor="grey" >
            <th width="200px">ID</th>
            <th width="200px">Sender</th>
            <th width="200px">Document</th>
            <th width="200px">isVerified</th>
            <th width="200px">Verify</th>
          </tr>
          {documentData?.map((i, key) => (
            <tr key={key} bgcolor="lightgrey" align="center">
              <td height={"50px"}> {i.id} </td>
              <td height={"50px"}> {i.sender}  </td>
              <td height={"50px"}>  <a href={`${i.uri}`} target="blank"  >view </a> </td>
              <td height={"50px"}>  {i.isVerified} </td>
              <td height={"50px"}> <button onClick={() => verify(i)}  > Verify </button>  </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}
